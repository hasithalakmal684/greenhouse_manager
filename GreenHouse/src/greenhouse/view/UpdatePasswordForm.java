/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package greenhouse.view;

import greenhouse.GreenHouse;
import greenhouse.dao.UsersDAO;
import greenhouse.utility.HTMLEmail;
import java.awt.Image;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import org.apache.commons.codec.digest.DigestUtils;
import org.apache.commons.lang3.RandomStringUtils;

/**
 *
 * @author Hasitha Lakmal
 */
public class UpdatePasswordForm extends javax.swing.JDialog {

    BufferedImage showPassword;
    BufferedImage hidePassword;
    BufferedImage correctImg;
    BufferedImage wrongImg;
    ImageIcon showPasswordIcon;
    ImageIcon hidePasswordIcon;
    ImageIcon correctIcon;
    ImageIcon wrongIcon;

    private String verificationCode;

    /**
     * Creates new form UpdatePassword
     */
    public UpdatePasswordForm(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setIconImage(GreenHouse.app_icon);
        showPasswordCheckBox.setSize(24, 24);
        passwordValidityLabel.setSize(24, 24);

        resendEmailButton.setEnabled(false);
        try {
            showPassword = ImageIO.read(new File(".\\src\\greenhouse\\images\\show_password.png"));
            showPasswordIcon = new ImageIcon(showPassword.getScaledInstance(20, 20, Image.SCALE_SMOOTH));

            hidePassword = ImageIO.read(new File(".\\src\\greenhouse\\images\\show_password.png"));
            hidePasswordIcon = new ImageIcon(hidePassword.getScaledInstance(20, 20, Image.SCALE_SMOOTH));

            correctImg = ImageIO.read(new File(".\\src\\greenhouse\\images\\correct.gif"));
            correctIcon = new ImageIcon(correctImg.getScaledInstance(20, 20, Image.SCALE_SMOOTH));

            wrongImg = ImageIO.read(new File(".\\src\\greenhouse\\images\\wrong.png"));
            wrongIcon = new ImageIcon(wrongImg.getScaledInstance(20, 20, Image.SCALE_SMOOTH));

            showPasswordCheckBox.setIcon(showPasswordIcon);
        } catch (IOException ex) {
            Logger.getLogger(UpdatePasswordForm.class.getName()).log(Level.SEVERE, null, ex);
        }

        showPasswordCheckBox.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {
                if (e.getStateChange() == ItemEvent.SELECTED) {
                    passwordField.setEchoChar('*');
                    confirmPasswordField.setEchoChar('*');
                    showPasswordCheckBox.setIcon(showPasswordIcon);
                    showPasswordCheckBox.revalidate();
                } else {
                    passwordField.setEchoChar((char) 0);
                    confirmPasswordField.setEchoChar((char) 0);
                    showPasswordCheckBox.setIcon(hidePasswordIcon);
                    showPasswordCheckBox.revalidate();
                }
            }
        });

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        titleLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        passwordField = new javax.swing.JPasswordField();
        confirmPasswordField = new javax.swing.JPasswordField();
        updateButton = new javax.swing.JButton();
        showPasswordCheckBox = new javax.swing.JCheckBox();
        passwordValidityLabel = new javax.swing.JLabel();
        resendEmailButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        titleLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        titleLabel.setText("Update Password");

        jLabel1.setText("Password :");

        jLabel2.setText("Confirm Password :");

        confirmPasswordField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                confirmPasswordFieldKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                confirmPasswordFieldKeyReleased(evt);
            }
        });

        updateButton.setText("Update");
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        showPasswordCheckBox.setText("Show/Hide");

        resendEmailButton.setText("Send Verification Email Again");
        resendEmailButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resendEmailButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(titleLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 451, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(resendEmailButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(updateButton)
                        .addGap(7, 7, 7))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(passwordField)
                            .addComponent(confirmPasswordField, javax.swing.GroupLayout.DEFAULT_SIZE, 265, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(showPasswordCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(passwordValidityLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(titleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(showPasswordCheckBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(confirmPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(passwordValidityLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(updateButton)
                    .addComponent(resendEmailButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        try {
            String password = new String(passwordField.getPassword());
            String confPassword = new String(confirmPasswordField.getPassword());

            verificationCode = RandomStringUtils.randomAlphanumeric(10);

            HTMLEmail hTMLEmail = new HTMLEmail();
            hTMLEmail.sendPasswordResetEmail(GreenHouse.user_email, verificationCode);
            resendEmailButton.setEnabled(true);
            String input = JOptionPane.showInputDialog(this, "Enter your verification code sent to your email : ", "Verfication Code", JOptionPane.INFORMATION_MESSAGE);
            while (!input.equals(verificationCode)) {
                JOptionPane.showMessageDialog(this, "Verificaton code is wrong. Try again.");
                input = JOptionPane.showInputDialog(this, "Enter your verification code sent to your email : ", "Verfication Code", JOptionPane.INFORMATION_MESSAGE);
            }
            if (input.equals(verificationCode)) {
                String passwordHex = DigestUtils.sha1Hex(password);
                int rep = UsersDAO.updatePassword(GreenHouse.user_email, passwordHex);
                this.setVisible(false);
            }
        } catch (IOException ex) {
            Logger.getLogger(UpdatePasswordForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(UpdatePasswordForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(UpdatePasswordForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_updateButtonActionPerformed

    private void confirmPasswordFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_confirmPasswordFieldKeyPressed
        String password = new String(passwordField.getPassword());
        String confPassword = new String(confirmPasswordField.getPassword());
        if (password.equals(confPassword)) {
            passwordValidityLabel.setIcon(correctIcon);
        } else {
            passwordValidityLabel.setIcon(wrongIcon);
        }
    }//GEN-LAST:event_confirmPasswordFieldKeyPressed

    private void confirmPasswordFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_confirmPasswordFieldKeyReleased
        String password = new String(passwordField.getPassword());
        String confPassword = new String(confirmPasswordField.getPassword());
        if (password.equals(confPassword)) {
            passwordValidityLabel.setIcon(correctIcon);
        } else {
            passwordValidityLabel.setIcon(wrongIcon);
        }
    }//GEN-LAST:event_confirmPasswordFieldKeyReleased

    private void resendEmailButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resendEmailButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_resendEmailButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UpdatePasswordForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UpdatePasswordForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UpdatePasswordForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UpdatePasswordForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                UpdatePasswordForm dialog = new UpdatePasswordForm(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPasswordField confirmPasswordField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPasswordField passwordField;
    private javax.swing.JLabel passwordValidityLabel;
    private javax.swing.JButton resendEmailButton;
    private javax.swing.JCheckBox showPasswordCheckBox;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JButton updateButton;
    // End of variables declaration//GEN-END:variables
}
