/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package greenhouse.view;

import greenhouse.GreenHouse;
import greenhouse.dao.UsersDAO;
import greenhouse.model.Users;
import greenhouse.utility.HTMLEmail;
import greenhouse.utility.Validator;
import java.awt.Dimension;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import org.apache.commons.codec.digest.DigestUtils;
import org.apache.commons.lang3.RandomStringUtils;

/**
 *
 * @author Hasitha Lakmal
 */
public class LoginPanel extends javax.swing.JPanel {

    BufferedImage correctImg;
    BufferedImage wrongImg;
    ImageIcon correctIcon;
    ImageIcon wrongIcon;
    JFrame parent;
    MainForm mainFrame;

    /**
     * Creates new form LoginPanel
     */
    public LoginPanel() {
        initComponents();
        emailTextField.requestFocus();
        submitButton.setEnabled(false);
        passwordField.setEnabled(false);

        emailValidityLabel.setSize(24, 24);
        try {
            correctImg = ImageIO.read(new File(".\\src\\greenhouse\\images\\correct.gif"));
            wrongImg = ImageIO.read(new File(".\\src\\greenhouse\\images\\wrong.png"));
            correctIcon = new ImageIcon(correctImg.getScaledInstance(20, 20, Image.SCALE_SMOOTH));
            wrongIcon = new ImageIcon(wrongImg.getScaledInstance(20, 20, Image.SCALE_SMOOTH));
        } catch (IOException ex) {
            Logger.getLogger(LoginPanel.class.getName()).log(Level.SEVERE, null, ex);
        }

        mainFrame = new MainForm();
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        mainFrame.setSize(screenSize);
    }

    public LoginPanel(JFrame parent) {
        this();
        this.parent = parent;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        passwordField = new javax.swing.JPasswordField();
        submitButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        emailValidityLabel = new javax.swing.JLabel();
        emailTextField = new javax.swing.JTextField();

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel1.setText("Email :");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel2.setText("Password :");

        passwordField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                passwordFieldActionPerformed(evt);
            }
        });
        passwordField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                passwordFieldKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                passwordFieldKeyReleased(evt);
            }
        });

        submitButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        submitButton.setText("Submit");
        submitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitButtonActionPerformed(evt);
            }
        });

        cancelButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        emailTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                emailTextFieldActionPerformed(evt);
            }
        });
        emailTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                emailTextFieldKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                emailTextFieldKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(passwordField, javax.swing.GroupLayout.DEFAULT_SIZE, 304, Short.MAX_VALUE)
                            .addComponent(emailTextField))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(emailValidityLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(submitButton)
                        .addGap(2, 2, 2)
                        .addComponent(cancelButton)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(emailValidityLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(emailTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(submitButton)
                    .addComponent(cancelButton))
                .addContainerGap(28, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void submitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitButtonActionPerformed
        String email = emailTextField.getText();
        String password = new String(passwordField.getPassword());
        String sha1Hex = DigestUtils.sha1Hex(password);

        try {
            Users user = UsersDAO.getUserAuthenticationDetails(email);
            //for handling view compnents and session==========================
            GreenHouse.user_email = user.getEmail();
            GreenHouse.user_name = user.getUserDetails().getName();
            GreenHouse.user_status = user.getAdmin();
            if (user.getAdmin() == 1) {
                if (GreenHouse.user_name.length() > 0) {
                    mainFrame.userLabel.setText("Hi," + GreenHouse.user_name + "(Admin)");
                } else {
                    mainFrame.userLabel.setText("Hi," + GreenHouse.user_email + "(Admin)");
                }
            } else {
                if (GreenHouse.user_name.length() > 0) {
                    mainFrame.userLabel.setText("Hi," + GreenHouse.user_name);
                } else {
                    mainFrame.userLabel.setText("Hi," + GreenHouse.user_email);
                }
            }
            //====================================================================
            if (user == null) {
                JOptionPane.showMessageDialog(parent, "Email is incorrect or Email is not registered.", "Error", JOptionPane.ERROR_MESSAGE);
            } else {
                if (user.getUsed() == 1) {
                    if (user.getPassword().equals(sha1Hex)) {
                        parent.setVisible(false);
                        mainFrame.setVisible(true);
                    } else {
                        JOptionPane.showMessageDialog(parent, "Password is incorrect.", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                } else {
                    if (user.getAltpassword().equals(sha1Hex)) {
                        int rep = UsersDAO.verifyAccount(email);
                        JOptionPane.showMessageDialog(parent, "Account verification completed. Use your own password to loginto system next time.");
                        parent.setVisible(false);
                        mainFrame.setVisible(true);
                    } else {
                        int option = JOptionPane.showOptionDialog(parent, "Please verify your account using email sent to your email account.", "Warning", JOptionPane.OK_CANCEL_OPTION, JOptionPane.WARNING_MESSAGE, null, new String[]{"Send Verification Email again.", "Cancel"}, null);
                        if (option == 0) {
                            String generatedPassword = RandomStringUtils.randomAlphanumeric(10);
                            String altPassword = DigestUtils.sha1Hex(generatedPassword);
                            int rep = UsersDAO.updateAltPassword(email, altPassword);
                            HTMLEmail hTMLEmail = new HTMLEmail();
                            hTMLEmail.sendAccountVerificationEmail(email, generatedPassword);
                        }
                    }
                }
            }

        } catch (ClassNotFoundException ex) {
            Logger.getLogger(LoginPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(LoginPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(LoginPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_submitButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        System.exit(0);
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void emailTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_emailTextFieldActionPerformed
        if (Validator.validateEmail(emailTextField.getText())) {
            passwordField.setEnabled(true);
            passwordField.requestFocus();
            emailValidityLabel.setIcon(correctIcon);
        } else {
            emailTextField.requestFocus();
            emailValidityLabel.setIcon(wrongIcon);
            emailTextField.selectAll();
            emailValidityLabel.setToolTipText("Must be a valid email.");
        }

    }//GEN-LAST:event_emailTextFieldActionPerformed

    private void passwordFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_passwordFieldKeyPressed
        String password = new String(passwordField.getPassword());
        if (password.isEmpty()) {
            passwordField.requestFocus();
            submitButton.setEnabled(false);
        } else {
            submitButton.setEnabled(true);
        }
    }//GEN-LAST:event_passwordFieldKeyPressed

    private void passwordFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_passwordFieldKeyReleased
        String password = new String(passwordField.getPassword());
        if (password.isEmpty()) {
            passwordField.requestFocus();
            submitButton.setEnabled(false);
        } else {
            submitButton.setEnabled(true);
        }
    }//GEN-LAST:event_passwordFieldKeyReleased

    private void passwordFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_passwordFieldActionPerformed
        String password = new String(passwordField.getPassword());
        if (password.isEmpty()) {
            passwordField.requestFocus();
            submitButton.setEnabled(false);
        } else {
            submitButton.setEnabled(true);
            submitButton.doClick();
        }
    }//GEN-LAST:event_passwordFieldActionPerformed

    private void emailTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_emailTextFieldKeyPressed
        if (Validator.validateEmail(emailTextField.getText())) {
            passwordField.setEnabled(true);
            emailValidityLabel.setIcon(correctIcon);
        } else {
            passwordField.setEnabled(false);
            emailValidityLabel.setIcon(null);
        }
    }//GEN-LAST:event_emailTextFieldKeyPressed

    private void emailTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_emailTextFieldKeyReleased
        if (Validator.validateEmail(emailTextField.getText())) {
            passwordField.setEnabled(true);
            emailValidityLabel.setIcon(correctIcon);
        } else {
            passwordField.setEnabled(false);
            emailValidityLabel.setIcon(null);
        }
    }//GEN-LAST:event_emailTextFieldKeyReleased


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JTextField emailTextField;
    private javax.swing.JLabel emailValidityLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPasswordField passwordField;
    private javax.swing.JButton submitButton;
    // End of variables declaration//GEN-END:variables
}
