/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package greenhouse.view;

import greenhouse.GreenHouse;
import greenhouse.dao.DeviceTypeDAO;
import greenhouse.dao.GreenhouseDAO;
import greenhouse.model.DeviceType;
import greenhouse.model.Devices;
import greenhouse.model.Greenhouse;
import java.awt.Color;
import java.awt.Component;
import java.io.IOException;
import java.math.BigDecimal;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import org.apache.commons.lang3.RandomUtils;

/**
 *
 * @author Hasitha Lakmal
 */
public class NewGreenHouseForm extends javax.swing.JDialog {

    /**
     * Creates new form NewGreenHouseForm
     */
    public NewGreenHouseForm(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setIconImage(GreenHouse.app_icon);
        try {
            ArrayList<DeviceType> allDEviceTypes = DeviceTypeDAO.getAllDeviceTypes();
            for (DeviceType dt : allDEviceTypes) {
                devTypeComboBox.addItem(dt.getType());
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(NewGreenHouseForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(NewGreenHouseForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(NewGreenHouseForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        titleLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        nameTextField = new javax.swing.JTextField();
        availabilityLabel = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        cancelButton = new javax.swing.JButton();
        submitButton = new javax.swing.JButton();
        latFormattedTextField = new javax.swing.JFormattedTextField();
        lonFormattedTextField = new javax.swing.JFormattedTextField();
        openMapButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        devTypeComboBox = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        descTextField = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        tempButton = new javax.swing.JButton();
        lightButton = new javax.swing.JButton();
        humidityButton = new javax.swing.JButton();
        phButton = new javax.swing.JButton();
        pressureButton = new javax.swing.JButton();
        soilMoistButton = new javax.swing.JButton();
        addDevButton = new javax.swing.JButton();
        ipFormattedTextField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        deviceTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        titleLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        titleLabel.setText("Add New Greenhouse");

        jLabel1.setText("Name :");

        nameTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                nameTextFieldKeyReleased(evt);
            }
        });

        jLabel2.setText("Location :");

        jLabel3.setText("Lat :");

        jLabel4.setText("Lon :");

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        submitButton.setText("Submit");
        submitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitButtonActionPerformed(evt);
            }
        });

        try {
            latFormattedTextField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##.######")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        latFormattedTextField.setText("00.000000");

        try {
            lonFormattedTextField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("###.######")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        lonFormattedTextField.setText("000.000000");

        openMapButton.setText("Open Map");

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel5.setText("Device Type :");

        jLabel6.setText("IP Address :");

        jLabel7.setText("Description :");

        jLabel8.setText("Tags :");

        descTextField.setEditable(false);

        jLabel9.setText("(Note : Use tags to create a description.)");

        tempButton.setText("Temperature");
        tempButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tempButtonActionPerformed(evt);
            }
        });

        lightButton.setText("Light");
        lightButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lightButtonActionPerformed(evt);
            }
        });

        humidityButton.setText("Humidity");
        humidityButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                humidityButtonActionPerformed(evt);
            }
        });

        phButton.setText("PH");
        phButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                phButtonActionPerformed(evt);
            }
        });

        pressureButton.setText("Pressure");
        pressureButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pressureButtonActionPerformed(evt);
            }
        });

        soilMoistButton.setText("Soil Moisture");
        soilMoistButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                soilMoistButtonActionPerformed(evt);
            }
        });

        addDevButton.setText("Add Device");
        addDevButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addDevButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addDevButton, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 72, Short.MAX_VALUE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel9)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(tempButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lightButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(humidityButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(phButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(pressureButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(soilMoistButton)))
                                .addComponent(descTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 462, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(devTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ipFormattedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 198, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6)
                    .addComponent(devTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ipFormattedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(descTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(tempButton)
                    .addComponent(lightButton)
                    .addComponent(humidityButton)
                    .addComponent(phButton)
                    .addComponent(pressureButton)
                    .addComponent(soilMoistButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addDevButton)
                .addContainerGap())
        );

        deviceTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "No", "Device Type", "IP", "Description", "Remove"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(deviceTable);
        if (deviceTable.getColumnModel().getColumnCount() > 0) {
            deviceTable.getColumnModel().getColumn(0).setResizable(false);
            deviceTable.getColumnModel().getColumn(3).setResizable(false);
            deviceTable.getColumnModel().getColumn(4).setResizable(false);
        }

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(titleLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(submitButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancelButton))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel4))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lonFormattedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(latFormattedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(openMapButton)))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(nameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(10, 10, 10)
                                .addComponent(availabilityLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(titleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(nameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(availabilityLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(latFormattedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(openMapButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(lonFormattedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelButton)
                    .addComponent(submitButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void nameTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nameTextFieldKeyReleased
        String name = nameTextField.getText();
        try {
            int names = GreenhouseDAO.isGreenhouseNameAvailable(name);
            if (names == 0) {
                availabilityLabel.setText("Name Available.");
                availabilityLabel.setForeground(new Color(0, 200, 0));
            } else {
                String sug1 = name;
                String sug2 = name;
                while (GreenhouseDAO.isGreenhouseNameAvailable(sug1) != 0) {
                    sug1 = name + RandomUtils.nextInt(names + 1, names + 100);
                }
                while (GreenhouseDAO.isGreenhouseNameAvailable(sug2) != 0) {
                    sug2 = name + RandomUtils.nextInt(names + 1, names + 500);
                }
                availabilityLabel.setText("Name is not available. Suggestions : " + sug1 + "," + sug2);
                availabilityLabel.setForeground(Color.black);
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(NewGreenHouseForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(NewGreenHouseForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(NewGreenHouseForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_nameTextFieldKeyReleased

    private void tempButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tempButtonActionPerformed
        String desc = descTextField.getText();
        if (desc.contains(", Temperature") || desc.contains("Temperature, ")) {
            desc = desc.replace(", Temperature", "");
            desc = desc.replace("Temperature, ", "");

            if (desc.startsWith(desc)) {
                desc.replaceFirst(", ", "");
            }
            descTextField.setText(desc);
            tempButton.setText("Temperarture(+)");
        } else {
            if (desc.length() > 1) {
                descTextField.setText(desc + ", Temperature");
            } else {
                descTextField.setText("Temperature");
            }
            tempButton.setText("Temperarture(-)");
        }
    }//GEN-LAST:event_tempButtonActionPerformed

    private void lightButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lightButtonActionPerformed
        String desc = descTextField.getText();
        if (desc.contains(", Light") || desc.contains("Light, ")) {
            desc = desc.replace(", Light", "");
            desc = desc.replace("Light, ", "");

            if (desc.startsWith(desc)) {
                desc.replaceFirst(", ", "");
            }
            descTextField.setText(desc);
            lightButton.setText("Light(+)");
        } else {
            if (desc.length() > 1) {
                descTextField.setText(desc + ", Light");
            } else {
                descTextField.setText("Light");
            }
            lightButton.setText("Light(-)");
        }
    }//GEN-LAST:event_lightButtonActionPerformed

    private void humidityButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_humidityButtonActionPerformed
        String desc = descTextField.getText();
        if (desc.contains(", Humidity") || desc.contains("Humidity, ")) {
            desc = desc.replace(", Humidity", "");
            desc = desc.replace("Humidity, ", "");

            if (desc.startsWith(desc)) {
                desc.replaceFirst(", ", "");
            }
            descTextField.setText(desc);
            humidityButton.setText("Humidity(+)");
        } else {
            if (desc.length() > 1) {
                descTextField.setText(desc + ", Humidity");
            } else {
                descTextField.setText("Humidity");
            }
            humidityButton.setText("Humidity(-)");
        }
    }//GEN-LAST:event_humidityButtonActionPerformed

    private void phButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_phButtonActionPerformed
        String desc = descTextField.getText();
        if (desc.contains(", PH") || desc.contains("PH, ")) {
            desc = desc.replace(", PH", "");
            desc = desc.replace("PH, ", "");

            if (desc.startsWith(desc)) {
                desc.replaceFirst(", ", "");
            }
            descTextField.setText(desc);
            phButton.setText("PH(+)");
        } else {
            if (desc.length() > 1) {
                descTextField.setText(desc + ", PH");
            } else {
                descTextField.setText("PH");
            }
            phButton.setText("PH(-)");
        }
    }//GEN-LAST:event_phButtonActionPerformed

    private void pressureButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pressureButtonActionPerformed
        String desc = descTextField.getText();
        if (desc.contains(", Pressure") || desc.contains("Pressure, ")) {
            desc = desc.replace(", Pressure", "");
            desc = desc.replace("Pressure, ", "");

            if (desc.startsWith(desc)) {
                desc.replaceFirst(", ", "");
            }
            descTextField.setText(desc);
            pressureButton.setText("Pressure(+)");
        } else {
            if (desc.length() > 1) {
                descTextField.setText(desc + ", Pressure");
            } else {
                descTextField.setText("Pressure");
            }
            pressureButton.setText("Pressure(-)");
        }
    }//GEN-LAST:event_pressureButtonActionPerformed

    private void soilMoistButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_soilMoistButtonActionPerformed
        String desc = descTextField.getText();
        if (desc.contains(", Soil Moisture") || desc.contains("Soil Moisture, ")) {
            desc = desc.replace(", Soil Moisture", "");
            desc = desc.replace("Soil Moisture, ", "");

            if (desc.startsWith(desc)) {
                desc.replaceFirst(", ", "");
            }
            descTextField.setText(desc);
            soilMoistButton.setText("Soil Moisture(+)");
        } else {
            if (desc.length() > 1) {
                descTextField.setText(desc + ", Soil Moisture");
            } else {
                descTextField.setText("Soil Moisture");
            }
            soilMoistButton.setText("Soil Moisture(-)");
        }
    }//GEN-LAST:event_soilMoistButtonActionPerformed

    private void addDevButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addDevButtonActionPerformed
        Integer id = 0;
        if (deviceTable.getRowCount() > 0) {
            id = (Integer) deviceTable.getValueAt(deviceTable.getRowCount() - 1, 0);
        }
        String devType = (String) devTypeComboBox.getSelectedItem();
        String ip = ipFormattedTextField.getText();
        String desc = descTextField.getText();

        DefaultTableModel dtm = (DefaultTableModel) deviceTable.getModel();
        deviceTable.getColumn("Remove").setCellRenderer(new ButtonRenderer());
        dtm.addRow(new Object[]{id + 1, devType, ip, desc});
        ipFormattedTextField.setText("   .   .   .   ");
        descTextField.setText("");
    }//GEN-LAST:event_addDevButtonActionPerformed

    private void submitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitButtonActionPerformed
        try {
            HashMap<String, Integer> deviceTypesMap = DeviceTypeDAO.getDeviceTypesMap();

            String name = nameTextField.getText();
            String lat = latFormattedTextField.getText();
            String lon = lonFormattedTextField.getText();

            List<Devices> deviceList = new ArrayList<>();
            for (int i = 0; i < deviceTable.getRowCount(); i++) {
                Devices device = new Devices();
                device.setDtId(deviceTypesMap.get((String) deviceTable.getValueAt(i, 1)));
                device.setIpAddr((String) deviceTable.getValueAt(i, 2));
                device.setDescription((String) deviceTable.getValueAt(i, 3));
                deviceList.add(device);
            }

            Greenhouse greenhouse = new Greenhouse();
            greenhouse.setName(name);
            System.out.println(lat);
            System.out.println(lon);
            if (lat.length() > 0) {
                greenhouse.setLatitude(new BigDecimal(lat));
            } else {
                greenhouse.setLatitude(new BigDecimal("0.0"));
            }
            if (lon.length() > 0) {
                greenhouse.setLongitude(new BigDecimal(lon));
            } else {
                greenhouse.setLongitude(new BigDecimal("0.0"));
            }
            greenhouse.setDevicesList(deviceList);

            int res = GreenhouseDAO.insertNewGreenhouse(greenhouse);
            if (res > 0) {
                JOptionPane.showMessageDialog(this, "Insertion Successful.");
                this.setVisible(false);
            }else{
                JOptionPane.showMessageDialog(this, "Insertion failed.");
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(NewGreenHouseForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(NewGreenHouseForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(NewGreenHouseForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_submitButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_cancelButtonActionPerformed

    class ButtonRenderer extends JButton implements TableCellRenderer {

        public ButtonRenderer() {
            setOpaque(true);
            setText("Remove");
        }

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            if (isSelected) {
                DefaultTableModel dtm = (DefaultTableModel) table.getModel();
                dtm.removeRow(row);
                for (int i = 0; i < dtm.getRowCount(); i++) {
                    dtm.setValueAt(i + 1, i, 0);;
                }
            }
            return this;
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewGreenHouseForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewGreenHouseForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewGreenHouseForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewGreenHouseForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                NewGreenHouseForm dialog = new NewGreenHouseForm(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addDevButton;
    private javax.swing.JLabel availabilityLabel;
    private javax.swing.JButton cancelButton;
    private javax.swing.JTextField descTextField;
    private javax.swing.JComboBox<String> devTypeComboBox;
    private javax.swing.JTable deviceTable;
    private javax.swing.JButton humidityButton;
    private javax.swing.JTextField ipFormattedTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JFormattedTextField latFormattedTextField;
    private javax.swing.JButton lightButton;
    private javax.swing.JFormattedTextField lonFormattedTextField;
    private javax.swing.JTextField nameTextField;
    private javax.swing.JButton openMapButton;
    private javax.swing.JButton phButton;
    private javax.swing.JButton pressureButton;
    private javax.swing.JButton soilMoistButton;
    private javax.swing.JButton submitButton;
    private javax.swing.JButton tempButton;
    private javax.swing.JLabel titleLabel;
    // End of variables declaration//GEN-END:variables
}
